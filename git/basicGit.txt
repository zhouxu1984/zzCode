// git 安装后配置
git config --global user.name "Your Name"    // global参数表示对本机所有git仓库有效
git config --global user.email "email@example.com"

// 创建版本库，windows目录路径确保不含中文
git init

// 把文件添加到版本库
git add xxx.xx   or  git add <folderName>/      // 添加目录带不带/都行，目录里的文件都会添加
git commit -m "message"

// 查看工作区状态、日志和版本回退
git status
git diff xxx.xx          // 对比工作区和暂存区之间的差别
git diff HEAD -- xxx.xx  // 查看工作区和版本库里面最新版本的区别
git log
git reset --hard HEAD^    // 回退到上一个版本， HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示上上个版本，HEAD~100表示上100个版本。
git reset --hard <commit_id>    // commit_id为log里显示的版本号前几位，一般5位就够了
git reflog   // 包含reset的log日志都会列出
git checkout -- xxx.xx   // 丢弃掉工作区的修改，git add过的内容不会撤销， --不能省。
git reset HEAD xxx.xx    // 撤销掉已经add到暂存区的修改，unstage, 修改回到工作区。


// 把文件从版本库中删除
git rm xxx.xx   然后提交

// 远程仓库相关
// 创建SSH Key, 本地git仓库和远程github等仓库之间的传输是通过SSH加密的
ssh-keygen -t rsa -C "youremail@example.com"    然后一路回车，使用默认值即可，用户主目录里会产生.ssh目录，里面有id_rsa和id_rsa_pub，SSH Key的密钥对，pub是公钥，需添加到远程服务器上
// 本地仓库关联远程库，并推送到远程库
git remote add origin git@github.com:zhouxu1984/zzCode.git   // 远程库的名字是origin，默认，可以改
git push -u origin master   // 把当前分支master推送到远程， -u参数把本地master分支和远程的master分支进行关联，方便以后操作
git push origin master  // 把本地修改推送到远程
// 克隆远程库
git clone git@github.com:zhouxu1984/zzCode.git

// 分支管理
git checkout -b dev    // 创建并切换到dev分支  -b表示创建并切换
git branch dev   &   git checkout dev    // 同上
git switch -c dev   // 同上
git switch dev // 同git checkout dev
git branch   // 查看当前分支
git merge dev   // 将dev分支的修改合并到当前分支
git branch -d dev   // 删掉dev分支



