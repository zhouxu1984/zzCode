// git 安装后配置
git config --global user.name "Your Name"    // global参数表示对本机所有git仓库有效
git config --global user.email "email@example.com"

// 创建版本库，windows目录路径确保不含中文
git init

// 把文件添加到版本库
git add xxx.xx   or  git add <folderName>/      // 添加目录带不带/都行，目录里的文件都会添加
git add .  // 添加所有当前的改动
git commit -m "message"

// 查看工作区状态、日志和版本回退
git status
git diff xxx.xx          // 对比工作区和暂存区之间的差别
git diff HEAD -- xxx.xx  // 查看工作区和版本库里面最新版本的区别
git log
git log -1 // 查看最近一条日志
git reset --hard HEAD^    // 回退到上一个版本， HEAD表示当前版本，HEAD^表示上一个版本，HEAD^^表示上上个版本，HEAD~100表示上100个版本。
git reset --hard <commit_id>    // commit_id为log里显示的版本号前几位，一般5位就够了
git reflog   // 可以查看所有分支的所有操作记录（包括已经被删除的 commit 记录和 reset 的操作）
git checkout -- xxx.xx   // 丢弃掉工作区的修改，git add过的内容不会撤销， --不能省。
git reset HEAD xxx.xx    // 撤销掉已经add到暂存区的修改，unstage, 修改回到工作区。
git log --graph --pretty=oneline --abbrev-commit   // --graph 可以看到merge等点线图，--abbrev-commit  id仅显示前几个字符

// 把文件从版本库中删除
git rm xxx.xx   然后提交

// 重命名文件和文件夹
git mv <oldName> <newName>

// 远程仓库相关
// 创建SSH Key, 本地git仓库和远程github等仓库之间的传输是通过SSH加密的
ssh-keygen -t rsa -C "youremail@example.com"    然后一路回车，使用默认值即可，用户主目录里会产生.ssh目录，里面有id_rsa和id_rsa_pub，SSH Key的密钥对，pub是公钥，需添加到远程服务器上
// 本地仓库关联远程库，并推送到远程库
git remote add origin <远程仓库地址>   // 远程库的名字是origin，默认，可以改
git push -u origin master   // 把当前分支master推送到远程， -u参数把本地master分支和远程的master分支进行关联，方便以后操作
git push origin master  // 把本地修改推送到远程
// 克隆远程库
git clone <远程仓库地址>   // 远程仓库地址如git@github.com:michaelliao/learngit.git, clone后只有master分支
git checkout -b dev origin/dev   // clone在本地获取到远程的其他分支
// 远程拉取
git pull 
git branch --set-upstream-to=origin/<branch> dev  // 如果git pull提示no tracking infomation 需指定本地分支和远程分支的链接
git pull origin/<branch> dev // 将远程库的branch拉取到本地的dev分支

git remote  // 查看对应的远程库名称
git remote -v  // 更详细的地址
git remote rm origin // 移除关联的远程库

git rebase // 变基，把本地未push的分叉提交历史整理成直线，不要在公共分支上rebase,会改变提交历史记录，一般只对尚未推送给别人的本地修改执行。

// 分支管理
git checkout -b dev    // 创建并切换到dev分支  -b表示创建并切换
git branch dev   &   git checkout dev    // 同上
git switch -c dev   // 同上
git switch dev // 同git checkout dev
git branch   // 查看当前分支
git merge dev   // 将dev分支的修改合并到当前分支, 默认会用Fast forward模式合并，删除分支会丢掉分支信息
git branch -d dev   // 删掉dev分支
git branch -D dev   // 强行删除dev分支（某些新建了文件没有合并过的分支，删除时需要用这个）
git merge --no-ff -m "message"  dev // --no-ff 表示禁用Fast forward模式,用普通模式合并，合并后的历史有分支，能看出曾经做过合并

git stash  // 能够将所有未提交的修改（工作区和暂存区）保存至堆栈中，用于后续恢复当前工作目录。
git stash list  // 查看保存过的堆栈列表
git stash pop   // 恢复刚保存过的堆栈并把stash内容清除
git stash apply + git stash drop   // 恢复stash 并删除，同上
git stash apply stash@{0}    //  多次stash后，恢复到指定stash

git cherry-pick <commit_id>   // 复制指定提交到当前分支，比如同步某bug的解决

// 标签管理
git tag vX.X   // 给当前分支打一个X.X版本的标签。 注意：tag与commit挂钩，某个分支能看到这个commit，默认是HEAD，就能看到这个tag
git tag   // 查看所有标签
git tag vX.X f259833 //给之前的某次提交打某个版本的标签
git show <tagname> // 查看某个标签对应信息
git tag -a vX.X -m "message" 1098ab // -a 指定标签名  -m备注描述信息
git tag -d vX.X // 删除指定标签
git push origin <tagname> // 创建的标签只存在本地，把标签推送到远程
git push origin --tags   // 一次性推送本地所有tag到远程
git push origin :refs/tags/vX.X  // 删除远程标签，先删除本地标签，再执行此操作， 测试发现：原来pull带tag的人，再pull不会同步删除本地库的标签

// github
fork + clone + push origin + pull request  // 完成开源社区协作

// 自定义git
git config --global color.ui  true   // 命令结果彩色显示
// 编写.gitignore文件
参考 https://github.com/github/gitignore 
*.abc //忽略后缀abc的文件 
abc/* //忽略整个abc目录

git add -f *.* //如果某个文件被gitignore忽略，有确实特例想添加，用-f
git check-ignore -v X.X // check X.X是被哪条规则忽略了

// 配置别名
git config --global alias.st status   
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"  // 推荐，极大鼓励用别名简化这种常用的长命令

// 搭建git服务器  推荐Ubuntu和Debian
1.sudo apt-get install.git  //安装git
2.sudo adduser <username> // 创建一个用户，用来运行git服务  username通常用git
3.将所有人的公钥id_rsa.pub导入到/home/git/.ssh/authorized_keys文件里，一行一个   //添加用户公钥list，人多用Gitosis
4.sudo git init --bare sample.git //初始化git仓库，--bare创建裸仓库，服务器git仓库纯粹为了共享，不直接改工作区
5.sudo chown -R git:git sample.git  //把owner改为git
6.编辑/etc/passwd: git:x:1001:1001:,,,:/home/git:/bin.bash 改为 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell   //禁用shell登录
7.git clone git@server:/srv/sample.git  //克隆远程仓库

// 管理提交权限等，可以用Gitolite工具








